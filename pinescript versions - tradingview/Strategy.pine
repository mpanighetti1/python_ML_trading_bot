// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Trueglory

//@version=5
strategy("Liquidity Purge Strategy - TG", "TG Inc - LPS _ Strategy", overlay=true, initial_capital=15000, margin_long=2, margin_short=2)

///////////// COLORS ////////////////////////////

color redColor  = #FF0000
color greenColor  = #0FFF00
color yellowColor  = #FFF500
color blueColor  = #48F0ED
color darkblueColor  = #000DFF
color whiteColor  = #FFFFFF

//////////// SOURCES /////////////////////////////

source_input = input.int(15, "Source Timeframe (mins)", minval=1)
first_target_length_input = input.int(300, "1st Target Look-Back Length", minval=1, step=1)
source = str.tostring(source_input)

HTFBiasMultiplier_input = input.int(96, "HTF Bias Multiplier", minval=1, step=5)
HTF_source_input = source_input * HTFBiasMultiplier_input
HTF_source = str.tostring(HTF_source_input)

prev_source_c = request.security(syminfo.tickerid, source, close[1], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_off)
prev_source_h = request.security(syminfo.tickerid, source, high[1], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_off)
prev_source_l = request.security(syminfo.tickerid, source, low[1], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_off)
source_c = request.security(syminfo.tickerid, source, close[0], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_on)
source_h = request.security(syminfo.tickerid, source, high[0], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_on)
source_l = request.security(syminfo.tickerid, source, low[0], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_on)

prev_HTF_source_c = request.security(syminfo.tickerid, HTF_source, close[0], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_on)
HTF_source_c = request.security(syminfo.tickerid, HTF_source, close[0], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_on)

//////////// LENGTH CALCULATIONS /////////////////


ATRperiod_input = input.int(1200, "ATR Period (Stop-Loss)", minval=1, step=50)
ATRmultipler_input = input.float(1.8, "ATR Multiplier (Stop-Loss)", minval=1, step=0.1)

resolution_multiplier = (timeframe.multiplier / source_input)
first_target_length = math.round(first_target_length_input / resolution_multiplier)
length_ATRperiod = math.round(ATRperiod_input / resolution_multiplier)

//////////// MOVING AVERAGE LINE /////////////////

ma(source, length, type) =>
    type == "SMA" ? ta.sma(source, length) :
     type == "EMA" ? ta.ema(source, length) :
     type == "SMMA (RMA)" ? ta.rma(source, length) :
     type == "WMA" ? ta.wma(source, length) :
     type == "VWMA" ? ta.vwma(source, length) :
     na

show_ma1   = input(true   , "MA Bias Settings", inline="MA #1")
ma1_type   = input.string("SMA"  , ""     , inline="MA #1", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma1_length = input.int(110     , ""     , inline="MA #1", minval=1, step=5)
ma1_color  = input(#f6c309, ""     , inline="MA #1")
ma1 = request.security(syminfo.tickerid, HTF_source, ma(HTF_source_c, ma1_length, ma1_type))
plot(show_ma1 ? ma1 : na, color = ma1_color, title="MA №1")

//////////// UP/DOWN DIRECTIONAL BIAS ////////////

bar_color_bias = input(true, "Show Bias Candle Colors")

green = prev_HTF_source_c > ma1 ? 1 : 0
red = prev_HTF_source_c < ma1 ? 1 : 0
barcolor(bar_color_bias ? green ? greenColor : red ? redColor : na : na)

//////////// ATR BANDS /////////////////////

atrPeriod = length_ATRperiod
atrMultiplier = ATRmultipler_input
atrSourceRef = "close"
getBandOffsetSource(srcIn, isUpperBand) =>
    ret = source_c
    switch srcIn
        "close" => ret := source_c
        "wicks" => ret := isUpperBand ? source_h : source_l
        => ret := source_c
    ret
atr = ta.atr(atrPeriod)
scaledATR = atr * atrMultiplier
upperATRBand = getBandOffsetSource(atrSourceRef, true) + scaledATR
lowerATRBand = getBandOffsetSource(atrSourceRef, false) - scaledATR
//plot(upperATRBand, "Upper ATR Band", greenColor, 1, style=plot.style_steplinebr)
//plot(lowerATRBand, "Lower ATR Band", yellowColor, 3, style=plot.style_steplinebr)

//////////// WILLIAMS FRACTALS ////////////

// Define "n" as the number of periods and keep a minimum value of 2 for error handling.
n = input.int(title="Fractal Period", defval=3, minval=2)

// UpFractal
bool upflagDownFrontier = true
bool upflagUpFrontier0 = true
bool upflagUpFrontier1 = true
bool upflagUpFrontier2 = true
bool upflagUpFrontier3 = true
bool upflagUpFrontier4 = true

for i = 1 to n
    upflagDownFrontier := upflagDownFrontier and (high[n-i] < high[n])
    upflagUpFrontier0 := upflagUpFrontier0 and (high[n+i] < high[n])
    upflagUpFrontier1 := upflagUpFrontier1 and (high[n+1] <= high[n] and high[n+i + 1] < high[n])
    upflagUpFrontier2 := upflagUpFrontier2 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+i + 2] < high[n])
    upflagUpFrontier3 := upflagUpFrontier3 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+i + 3] < high[n])
    upflagUpFrontier4 := upflagUpFrontier4 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+4] <= high[n] and high[n+i + 4] < high[n])
flagUpFrontier = upflagUpFrontier0 or upflagUpFrontier1 or upflagUpFrontier2 or upflagUpFrontier3 or upflagUpFrontier4

upFractal = (upflagDownFrontier and flagUpFrontier)

// downFractal
bool downflagDownFrontier = true
bool downflagUpFrontier0 = true
bool downflagUpFrontier1 = true
bool downflagUpFrontier2 = true
bool downflagUpFrontier3 = true
bool downflagUpFrontier4 = true

for i = 1 to n
    downflagDownFrontier := downflagDownFrontier and (low[n-i] > low[n])
    downflagUpFrontier0 := downflagUpFrontier0 and (low[n+i] > low[n])
    downflagUpFrontier1 := downflagUpFrontier1 and (low[n+1] >= low[n] and low[n+i + 1] > low[n])
    downflagUpFrontier2 := downflagUpFrontier2 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+i + 2] > low[n])
    downflagUpFrontier3 := downflagUpFrontier3 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+i + 3] > low[n])
    downflagUpFrontier4 := downflagUpFrontier4 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+4] >= low[n] and low[n+i + 4] > low[n])
flagDownFrontier = downflagUpFrontier0 or downflagUpFrontier1 or downflagUpFrontier2 or downflagUpFrontier3 or downflagUpFrontier4

downFractal = (downflagDownFrontier and flagDownFrontier)

plotshape(downFractal, style=shape.xcross, location=location.belowbar, offset=-n, color=greenColor, size = size.tiny)
plotshape(upFractal, style=shape.xcross,   location=location.abovebar, offset=-n, color=redColor, size = size.tiny)

//////////// PLOT HIGHS AND LOWS /////////

var float short_entry_first = na
var float short_entry_second = na
var float short_entry_third = na
var float short_first_TP = na

var float short_entry_max_value = na
var float short_entry_mid_value = na
var float short_entry_min_value = na

var float long_entry_first = na
var float long_entry_second = na
var float long_entry_third = na
var float long_first_TP = na

var float long_entry_max_value = na
var float long_entry_mid_value = na
var float long_entry_min_value = na

Dh_offset = request.security(syminfo.tickerid, source, high[n], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_on)
Dl_offset = request.security(syminfo.tickerid, source, low[n], gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_on)

highest_of_past_length = ta.highest(source_h, first_target_length)
lowest_of_past_length = ta.lowest(source_l, first_target_length)

if (upFractal)
    short_entry_third := short_entry_second
    short_entry_second := short_entry_first
    short_entry_first := Dh_offset
    long_first_TP := highest_of_past_length 

    if (not na(short_entry_first) and not na(short_entry_second) and not na(short_entry_third))
        short_entry_max_value := math.max(short_entry_first, math.max(short_entry_second, short_entry_third))
        short_entry_min_value := math.min(short_entry_first, math.min(short_entry_second, short_entry_third))

        if ((short_entry_max_value == short_entry_third and short_entry_min_value == short_entry_second) or (short_entry_max_value == short_entry_second and short_entry_min_value == short_entry_third))
            short_entry_mid_value := short_entry_first

        if ((short_entry_max_value == short_entry_first and short_entry_min_value == short_entry_third) or (short_entry_max_value == short_entry_third and short_entry_min_value == short_entry_first))
            short_entry_mid_value := short_entry_second

        if ((short_entry_max_value == short_entry_first and short_entry_min_value == short_entry_second) or (short_entry_max_value == short_entry_second and short_entry_min_value == short_entry_first))
            short_entry_mid_value := short_entry_third

if (downFractal)
    long_entry_third := long_entry_second
    long_entry_second := long_entry_first
    long_entry_first := Dl_offset
    short_first_TP := lowest_of_past_length

    if (not na(long_entry_first) and not na(long_entry_second) and not na(long_entry_third))
        long_entry_max_value := math.max(long_entry_first, math.max(long_entry_second, long_entry_third))
        long_entry_min_value := math.min(long_entry_first, math.min(long_entry_second, long_entry_third))

        if ((long_entry_max_value == long_entry_third and long_entry_min_value == long_entry_second) or (long_entry_max_value == long_entry_second and long_entry_min_value == long_entry_third))
            long_entry_mid_value := long_entry_first

        if ((long_entry_max_value == long_entry_first and long_entry_min_value == long_entry_third) or (long_entry_max_value == long_entry_third and long_entry_min_value == long_entry_first))
            long_entry_mid_value := long_entry_second

        if ((long_entry_max_value == long_entry_first and long_entry_min_value == long_entry_second) or (long_entry_max_value == long_entry_second and long_entry_min_value == long_entry_first))
            long_entry_mid_value := long_entry_third

plot(red ? short_entry_min_value : na, "1st Highest", redColor, 1, style=plot.style_steplinebr)
plot(red ? short_entry_mid_value : na, "2nd Highest", yellowColor, 1, style=plot.style_steplinebr)
plot(red ? short_entry_max_value : na, "3rd Highest", greenColor, 1, style=plot.style_steplinebr)
plot(red ? short_first_TP : na, "First Short Exit", blueColor, 1, style=plot.style_steplinebr)

plot(green ? long_entry_max_value : na, "1st Lowest", whiteColor, 1, style=plot.style_steplinebr)
plot(green ? long_entry_mid_value : na, "2nd Lowest", yellowColor, 1, style=plot.style_steplinebr)
plot(green ? long_entry_min_value : na, "3rd Lowest", greenColor, 1, style=plot.style_steplinebr)
plot(green ? long_first_TP : na, "First Long Exit", blueColor, 1, style=plot.style_steplinebr)

/////////////// SHORT STRATEGY PLOTS /////////////////////

var bool S1 = false
var bool S2 = false
var bool S3 = false
var bool short_first_TP_activated = false
var float short_fib_1_5_TP = 0
var bool short_fib_1_5_TP_activated = false
var float short_stop_level = 0
var float short_stop_level1 = 0
var float short_stop_level2 = 0
var float short_stop_level3 = 0

/////////////// SHORT - ENTRIES ////////////////////
//plotshape((S1 == false) and red and ta.crossover(source_h, short_entry_min_value), style=shape.triangledown, location=location.abovebar, color=whiteColor, size = size.tiny)
if ((S1 == false) and red and ta.crossover(source_h, short_entry_min_value))
    /////// SHORT ENTRY ORDER 1 GOES HERE //////////
    strategy.order("Short Entry 1", strategy.short, qty=5000)
    short_stop_level1 := upperATRBand
    short_stop_level := math.max(short_stop_level1, math.max(short_stop_level2, short_stop_level3))
    short_first_TP_activated := true
    short_fib_1_5_TP_activated := false
    S1 := true

//plotshape((S2 == false) and red and ta.crossover(source_h, short_entry_mid_value), style=shape.triangledown, location=location.abovebar, color=yellowColor, size = size.tiny)
if ((S2 == false) and red and ta.crossover(source_h, short_entry_mid_value))
    /////// SHORT ENTRY ORDER 2 GOES HERE //////////
    strategy.order("Short Entry 2", strategy.short, qty=5000)
    short_stop_level2 := upperATRBand
    short_stop_level := math.max(short_stop_level1, math.max(short_stop_level2, short_stop_level3))
    short_first_TP_activated := true
    short_fib_1_5_TP_activated := false
    S2 := true

//plotshape((S3 == false) and red and ta.crossover(source_h, short_entry_max_value), style=shape.triangledown, location=location.abovebar, color=greenColor, size = size.tiny)
if ((S3 == false) and red and ta.crossover(source_h, short_entry_max_value))
    /////// SHORT ENTRY ORDER 3 GOES HERE //////////
    strategy.order("Short Entry 3", strategy.short, qty=5000)
    short_stop_level3 := upperATRBand
    short_stop_level := math.max(short_stop_level1, math.max(short_stop_level2, short_stop_level3))
    short_first_TP_activated := true
    short_fib_1_5_TP_activated := false
    S3 := true

/////////////// SHORT - STOP LOSS //////////////////

plot(short_stop_level, "Short Stop Level", redColor, 3, style=plot.style_steplinebr)
var bool short_any = na
short_any := (S3 or S2 or S1)
//plotshape(short_any and ta.crossover(source_h, short_stop_level), style=shape.triangledown, location=location.abovebar, color=redColor, size = size.tiny)
if (short_any and ta.crossover(source_h, short_stop_level))
    /////// SHORT STOP-LOSS ORDER GOES HERE //////////
    strategy.close("", "Stop-Loss", qty_percent=100)
    S1 := false
    S2 := false
    S3 := false
    short_first_TP_activated := false
    short_fib_1_5_TP_activated := false
    short_stop_level1 := 0
    short_stop_level2 := 0
    short_stop_level3 := 0    

/////////////// SHORT - TAKE PROFIT ////////////////
//plotshape(short_first_TP_activated and short_any and ta.crossunder(source_l, short_first_TP), style=shape.triangledown, location=location.abovebar, color=blueColor, size = size.tiny)
if (short_first_TP_activated and short_any and ta.crossunder(source_l, short_first_TP))
    /////// SHORT TAKE PROFIT ORDER GOES HERE //////////
    strategy.close("", "Target 1", qty_percent=70)
    short_fib_1_5_TP := short_first_TP - ((short_entry_first - short_first_TP)*0.786)
    short_fib_1_5_TP_activated := true
    short_first_TP_activated := false
    S1 := false
    S2 := false
    S3 := false

plot(short_fib_1_5_TP, "Short Fib 2 TP", darkblueColor, 1, style=plot.style_steplinebr)
//plotshape(short_fib_1_5_TP_activated and ta.crossunder(source_l, short_fib_1_5_TP), style=shape.triangledown, location=location.abovebar, color=darkblueColor, size = size.tiny)
if (short_fib_1_5_TP_activated and ta.crossunder(source_l, short_fib_1_5_TP))
    /////// SHORT TAKE PROFIT 2 ORDER GOES HERE //////////
    strategy.close("", "Target 2", qty_percent=100)
    S1 := false
    S2 := false
    S3 := false
    short_fib_1_5_TP_activated := false
    short_stop_level1 := 0
    short_stop_level2 := 0
    short_stop_level3 := 0

/////////////// LONG STRATEGY PLOTS /////////////////////

var bool L1 = false
var bool L2 = false
var bool L3 = false
var bool long_first_TP_activated = false
var float long_fib_1_5_TP = 0
var bool long_fib_1_5_TP_activated = false
var float long_stop_level = 0
var float long_stop_level1 = 1e20
var float long_stop_level2 = 1e20
var float long_stop_level3 = 1e20

/////////////// LONG - ENTRIES ////////////////////
//plotshape((L1 == false) and green and ta.crossunder(source_l, long_entry_max_value), style=shape.triangleup, location=location.belowbar, color=whiteColor, size = size.tiny)
if ((L1 == false) and green and ta.crossunder(source_l, long_entry_max_value))
    /////// LONG ENTRY ORDER 1 GOES HERE //////////
    strategy.order("Long Entry 1", strategy.long, qty=5000)
    long_stop_level1 := lowerATRBand
    long_stop_level := math.min(long_stop_level1, math.min(long_stop_level2, long_stop_level3))
    long_first_TP_activated := true
    long_fib_1_5_TP_activated := false
    L1 := true
 
//plotshape((L2 == false) and green and ta.crossunder(source_l, long_entry_mid_value), style=shape.triangleup, location=location.belowbar, color=yellowColor, size = size.tiny)
if ((L2 == false) and green and ta.crossunder(source_l, long_entry_mid_value))
    /////// LONG ENTRY ORDER 2 GOES HERE //////////
    strategy.order("Long Entry 2", strategy.long, qty=5000)
    long_stop_level2 := lowerATRBand
    long_stop_level := math.min(long_stop_level1, math.min(long_stop_level2, long_stop_level3))
    long_first_TP_activated := true
    long_fib_1_5_TP_activated := false
    L2 := true

//plotshape((L3 == false) and green and ta.crossunder(source_l, long_entry_min_value), style=shape.triangleup, location=location.belowbar, color=greenColor, size = size.tiny)
if ((L3 == false) and green and ta.crossunder(source_l, long_entry_min_value))
    /////// LONG ENTRY ORDER 3 GOES HERE //////////
    strategy.order("Long Entry 3", strategy.long, qty=5000)
    long_stop_level3 := lowerATRBand
    long_stop_level := math.min(long_stop_level1, math.min(long_stop_level2, long_stop_level3))
    long_first_TP_activated := true
    long_fib_1_5_TP_activated := false
    L3 := true

/////////////// LONG - STOP LOSS //////////////////

plot(long_stop_level, "Long Stop Level", redColor, 3, style=plot.style_steplinebr)
var bool long_any = na
long_any := (L3 or L2 or L1)
//plotshape(long_any and ta.crossunder(source_l, long_stop_level), style=shape.triangleup, location=location.belowbar, color=redColor, size = size.tiny)
if (long_any and ta.crossunder(source_l, long_stop_level))
    /////// LONG STOP-LOSS ORDER GOES HERE //////////
    strategy.close("", "Stop-Loss", qty_percent=100)
    L1 := false
    L2 := false
    L3 := false
    long_first_TP_activated := false
    long_fib_1_5_TP_activated := false
    long_stop_level1 := 1e20
    long_stop_level2 := 1e20
    long_stop_level3 := 1e20    

/////////////// LONG - TAKE PROFIT ////////////////
//plotshape(long_first_TP_activated and long_any and ta.crossover(source_h, long_first_TP), style=shape.triangleup, location=location.belowbar, color=blueColor, size = size.tiny)
if (long_first_TP_activated and long_any and ta.crossover(source_h, long_first_TP))
    /////// LONG TAKE PROFIT ORDER GOES HERE //////////
    strategy.close("", "Target 1", qty_percent=70)
    long_fib_1_5_TP := long_first_TP + ((long_first_TP - long_entry_first)*0.786)
    long_fib_1_5_TP_activated := true
    long_first_TP_activated := false
    L1 := false
    L2 := false
    L3 := false

plot(long_fib_1_5_TP, "Long Fib 2 TP", darkblueColor, 1, style=plot.style_steplinebr)
//plotshape(long_fib_1_5_TP_activated and ta.crossover(source_h, long_fib_1_5_TP), style=shape.triangleup, location=location.belowbar, color=darkblueColor, size = size.tiny)
if (long_fib_1_5_TP_activated and ta.crossover(source_h, long_fib_1_5_TP))
    /////// LONG TAKE PROFIT 2 ORDER GOES HERE //////////
    strategy.close("", "Target 2", qty_percent=100)
    L1 := false
    L2 := false
    L3 := false
    long_fib_1_5_TP_activated := false
    long_stop_level1 := 1e20
    long_stop_level2 := 1e20
    long_stop_level3 := 1e20