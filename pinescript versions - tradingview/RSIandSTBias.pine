// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Trueglory

//@version=5
indicator("Directional Bias Tester", "TG Inc - DBT - RSI & SuperTrend", overlay=true)

///////////// COLORS ////////////////////////////

color redColor  = input(#FF0000, "Red Color")
color greenColor  = input(#0FFF00, "Green Color")
color yellowColor  = input(#FFF500, "Yellow Color")
color blueColor  = input(#48F0ED, "Blue Color")
color whiteColor  = input(#FFFFFF, "White Color")

//////////// INPUTS /////////////////////////////

source_input = input.timeframe("120", title="Source Timeframe")
length_input = input.int(690, "RSI Length", minval=1, step=1)
upper = input.int(50, "RSI Upper", minval=1)
lower = input.int(50, "RSI Lower", minval=1)
bar_color_bias = input(true, "Show Bias Candle Colors")

ST_period = input.int(defval=40, title="SuperTrend Period", step=1)
ST_src_input = input(close, title="SuperTrend Source")
ST_multiplier = input.float(defval=25, title="SuperTrend Multiplier", step=0.1)
highlighting = input.bool(title="Highlighter On/Off ?", defval=true)

//////////// SUPERTREND DIRECTIONAL BIAS ////////////

ST_gaps = barmerge.gaps_off
ST_lookahead = barmerge.lookahead_off
ST_src = request.security(syminfo.tickerid, source_input, ST_src_input[1], gaps=ST_gaps, lookahead=ST_lookahead)
greenColorTrans = color.new(greenColor, transp=70)
redColorTrans = color.new(redColor, transp=70)

ST_atr = ta.sma(ta.tr, ST_period)
HTF_ST_atr = request.security(syminfo.tickerid, source_input, ST_atr, gaps=ST_gaps, lookahead=ST_lookahead)

up = ST_src - (ST_multiplier * HTF_ST_atr)
up1 = nz(up[1], up)
up := ST_src[1] > up1 ? math.max(up, up1) : up
dn = ST_src + (ST_multiplier * HTF_ST_atr)
dn1 = nz(dn[1], dn)
dn := ST_src[1] < dn1 ? math.min(dn, dn1) : dn

trend = 1
trend := nz(trend[1], trend)
trend := trend == -1 and ST_src > dn1 ? 1 : trend == 1 and ST_src < up1 ? -1 : trend

//////////// RSI CALCULATIONS /////////////////

source_rsi = request.security(syminfo.tickerid, source_input, ta.rsi(close, length_input), barmerge.gaps_off, barmerge.lookahead_off)
source_rsi_isup() => source_rsi >= upper // Is RSI above upper?
source_rsi_isdown() => source_rsi <= lower // Is RSI below lower?
source_rsi_isup = source_rsi_isup() ? 1 : 0 // It is above 50 = 1, otherwise 0.
source_rsi_isdown = source_rsi_isdown() ? 1 : 0 // It is below 50 = 1, otherwise 0.

source_normal = request.security(syminfo.tickerid, source_input, close, barmerge.gaps_off, barmerge.lookahead_off)

//////////// UP/DOWN DIRECTIONAL BIAS ////////////

green = source_rsi_isup[1] and (trend == 1)
plotchar(green, "source_rsi_isup[1] (green)", "", location=location.top)
plotchar(source_rsi_isup, "source_rsi_isup", "", location=location.top)
normal_up = source_normal[1] <= source_normal ? 1 : 0
red = source_rsi_isdown[1] and (trend == -1)
plotchar(red, "source_rsi_isdown[1] (red)", "", location=location.top)
plotchar(source_rsi_isdown, "source_rsi_isdown", "", location=location.top)
normal_down = source_normal[1] >= source_normal ? 1 : 0
plotchar(normal_up, "normal_up", "", location=location.top)
plotchar(normal_down, "normal_down", "", location=location.top)

barcolor(bar_color_bias ? green ? greenColor : red ? redColor : na : na)

//////////// ACCURACY RATING ////////////

var float accuracy = 0.50
var int same_count = 0
var int different_count = 0

same_count += (green and normal_up) or (red and normal_down) ? 1 : 0
plotchar(same_count, "same_count", "", location=location.top)

different_count += (red and normal_up) or (green and normal_down) ? 1 : 0
plotchar(different_count, "different_count", "", location=location.top)

total_bars = same_count + different_count
plotchar(total_bars, "total_bars", "", location=location.top)

accuracy := same_count / total_bars
plotchar(accuracy, "accuracy", "", location=location.top)